package JavaCode.contest.weekly.n201_300.n235;

import utils.Parse;

import java.util.*;

/**
 * author: fangjie
 * email: syfangjie@live.cn
 * date: 2021/4/4 10:29 上午
 */
public class N4 {
    public static void main(String[] args) {
        System.out.println(new N4().countDifferentSubsequenceGCDs(
                Parse.parseToIntArray("[108001,62541,99795,57305,26265,84619,44070,105873,177569,62657,83171,142303,97327,8360,54342,42575,84197,79462,162465,119538,26120,3712,49027,198178,187202,143126,96355,53240,41506,72889,42218,29106,50005,98781,146766,113158,81006,54123,17195,74150,131061,131633,121320,59544,162194,189776,13027,68043,85223,102739,150749,192687,40615,171013,88564,86307,118320,44124,136806,25886,119328,33028,40409,62,100376,44384,34529,28662,145729,167101,54219,165836,28784,14540,151146,199137,128613,58584,141801,104287,188077,91339,76901,23787,58718,96529,195365,6355,24931,69068,73136,75830,144515,81260,47798,113105,180363,128289,84475,98652,73691,143696,105581,54710,109514,91903,18549,183527,139886,116945,79775,80577,103931,92077,185380,173698,7562,74747,34006,29561,196063,84611,62020,176078,63855,135209,155151,180200,90069,36815,157454,12038,91615,43883,152828,65872,138892,168247,104813,186792,15473,190013,162674,59336,78692,88387,90090,134742,195450,157934,194046,11255,618,108155,74261,1849,26020,35971,153328,73996,28655,11022,71673,13647,159298,125097,130891,13634,54181,50447,193494,12439,91443,73581,97738,134652,59345,84031,84617,129027,8978,155065,165096,34986,33679,149083,49566,171650,61558,187137,14259,23494,9101,13327,50125,197771,94048,108212,189143,41314,50906,54619,97878,172812,63666,60116,6684,110424,83774,143832,170007,101198,33995,89602,173502,170714,34944,24784,118627,197904,75322,191683,105343,105312,156279,26279,54313,185768,166815,83833,188293,154561,92031,180326,103095,102209,122116,79960,18327,126160,14799,127463,189137,30026,85505,47777,45396,83409,107467,38467,150135,45148,181310,47909,190220,159575,94900,105851,22986,161457,56633,158215,190310,158214,194309,192011,162435,40804,194826,194937,127769,98138,71230,188070,45867,80004,126895,9142,100760,34966,161852,120281,80156,89793,159977,149445,31826,90206,111989,63376,28583,1421,121105,31511,85203,160203,130052,157967,55229,26545,131860,6026,196964,139856,77973,108513,53968,82447,111402,165754,155793,50950,43746,193984,45637,12741,129410,113708,30153,45310,2872,172120,155363,10505,21725,119647,149155,112775,91208,49763,138332,14414,93525,124652,198277,24236,96022,47550,100298,63419,184841,21055,136639,67624,145274,154877,8361,147583,107496,38115,134163,69920,114152,57681,85890,113156,57210,146443,26737,56608,94510,142945,130576,143412,42084,198921,82055,100085,29270,60902,195057,104896,112314,121471,103588,161912,75203,182565,32819,55416,85260,6355,142118,18878,165605,20741,83419,110963,14407,127064,160202,184692,136825,30478,4055,169447,121126,176226,63703,123054,175975,162873,75997,99338,92051,67980,142928,54468,185428,181946,180438,140028,16169,183476,139308,169301,32429,173896,27067,146478,140643,31954,12049,21179,46175,193624,76082,106732,16264,21999,30041,50373,157850,38223,118610,2185,48592,51424,56504,56124,42745,191480,764,95156,131918,198791,168386,6268,61115,11813,163354,36989,43560,29902,62294,107379,37916,54544,170017,90757,13529,18441,177593,98136,74703,79957,12708,56432,123561,7437,21384,136333,12055,23026,130645,56159,30075,164837,29851,4821,8337,167753,106653,116286,30021,11887,4268,143492,236,156437,67282,26513,177043,65930,80007,42430,198460,97489,14168,26232,140834,89293,88129,39751,133166,145080,108102,23992,142838,73161,140750,159749,23013,114759,25766,30814,13809,181690,13062,18818,167806,10068,37116,52507,108927,178238,79789,164400,139361,146487,195612,57368,74456,169095,21037,137765,18615,162037,69621,134351,80586,118091,129669,160928,71277,112706,110871,64911,7783,96057,28053,195308,44644,178040,175418,161910,185920,39816,131616,181890,39619,118905,43568,163312,1875,158701,3285,108746,99136,85705,134784,124594,158164,151538,74446,4358,190560,3390,467,22170,191273,34690,183590,64689,183373,127479,52264,27514,22021,71840,26364,50244,194555,33844,79030,35583,88379,38012,140726,33469,194555,27604,153634,187019,103919,125242,58964,13679,119294,57380,144078,144303,181075,132410,124427,151022,57135,190354,78700,54616,96399,75874,189839,7387,166390,162359,126542,138639,194853,45020,165059,103008,149279,177795,174918,73545,181890,37248,177709,71168,115889,98398,44694,154769,163452,7650,117147,77998,112138,106610,149039,109605,112762,101982,45241,192951,140650,160324,99113,50357,50131,19582,168501,121966,175618,177999,137227,150067,84728,61385,192080,186564,101737,198507,19970,74542,27118,32454,101844,5785,54971,160576,106396,145778,118882,103094,65903,20987,62395,103560,25800,133906,74885,117948,172959,75576,66461,114526,139187,121201,62635,91083,84757,61224,90951,173669,5347,65963,166364,132401,31315,197749,126360,199275,175547,84192,78810,14225,10097,69878,141955,102834,106388,46915,150354,21034,87698,69283,469,83357,78127,197282,59624,134510,28587,100858,117945,176084,131596,96373,86706,70353,125915,56667,131876,168474,92643,13510,105835,107131,141786,174035,83812,124927,7189,31262,86883,158374,118735,120618,185046,195843,164164,138614,27823,67752,36151,56806,116,178852,175456,178359,196210,116460,141963,1026,18588,33260,6927,189949,146185,176420,12708,1517,160983,18074,166343,120140,128105,191683,101580,92749,109855,4439,51286,43954,8167,35807,153838,20615,53979,52312,62438,2104,124505,83521,62604,154195,33515,106546,101846,137558,174953,130180,51922,105106,67630,135899,170424,73910,198909,58050,43434,94400,7286,112607,71239,95573,24786,183736,90831,90682,46113,194004,107297,20899,19117,59247,61335,171250,169742,196568,9855,56331,71929,36780,83173,196778,163154,49181,173197,177996,9130,125809,50880,158791,187826,27849,63275,5294,134716,139631,182418,70740,3135,20687,125318,9834,134157,104700]")
        ));
    }
    public int countDifferentSubsequenceGCDs(int[] nums) {
        Set<Integer> set=new HashSet<>();
        for (int i:nums)set.add(i);
        help(nums,set);
        return set.size();
    }

    private void help(int[] arr, Set<Integer> set) {
        //TODO
    }

    private int gcd(int a, int b) {
        return b == 0? a: gcd(b, a % b);
    }
}
/*
给你一个由正整数组成的数组 nums 。

数字序列的 最大公约数 定义为序列中所有整数的共有约数中的最大整数。

例如，序列 [4,6,16] 的最大公约数是 2 。
数组的一个 子序列 本质是一个序列，可以通过删除数组中的某些元素（或者不删除）得到。

例如，[2,5,10] 是 [1,2,1,2,4,1,5,10] 的一个子序列。
计算并返回 nums 的所有 非空 子序列中 不同 最大公约数的 数目 。



示例 1：


输入：nums = [6,10,3]
输出：5
解释：上图显示了所有的非空子序列与各自的最大公约数。
不同的最大公约数为 6 、10 、3 、2 和 1 。
示例 2：

输入：nums = [5,15,40,5,6]
输出：7


提示：

1 <= nums.length <= 105
1 <= nums[i] <= 2 * 105
 */
